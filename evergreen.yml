variables:
- &package_deb
  archive: "https://downloads.mongodb.com/on-prem-mms/deb/mongodb-mms_4.2.15.56937.20200701T0316Z-1_x86_64.deb"
- &package_rpm
  archive: "https://downloads.mongodb.com/on-prem-mms/rpm/mongodb-mms-4.2.15.56937.20200701T0316Z-1.x86_64.rpm"

functions:
  "fetch source":
    - command: git.get_project
      type: system
      params:
        directory: src

  "merge in base branch":
    - command: shell.exec
      type: system
      params:
        working_dir: src
        shell: bash
        script: |
          # exit if non-patch or this is not a pull request
          if [[ "${is_patch}" != "true" || -z "${github_pr_number}" ]]; then
            exit 0
          fi

          # merge before checking
          echo "==>"
          echo "==> Merging in the base branch"
          git merge ${branch_name}

  "ego install":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          echo "==>"
          echo "==> Installing ego"
          bin/ego seed-local ${workdir}

  "install ops manager":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          echo "==>"
          echo "==> Installing Ops Manager ${version}"
          bin/ego ops_manager_install_version --version ${version} --mongodb-version ${mongodb_version}

  "install ops manager package":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          echo "==>"
          echo "==> Installing Ops Manager Package: ${archive}"
          bin/ego ops_manager_install_from_link --archive ${archive} --mongodb-version ${mongodb_version}

  "install ops manager tgz":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          echo "==>"
          echo "==> Installing Ops Manager ${version} (tgz)"
          bin/ego ops_manager_install_version --version ${version} --mongodb-version ${mongodb_version} --tgz

  "uninstall ops manager":
    - command: shell.exec
      params:
        working_dir: src
        shell: bash
        script: |
          set -e
          echo "==>"
          echo "==> Uninstalling Ops Manager"
          bin/ego ops_manager_uninstall

  "get logs":
    - command: shell.exec
      params:
        type: system
        shell: bash
        script: |
          echo "==>"
          echo "==> Printing any existing Ops Manager Logs"
          
          # Determine install directory
          DIR=/opt/mongodb/mms
          if [ -d "${workdir}/mongodb-mms" ]; then
            DIR="${workdir}/mongodb-mms"
          else
            echo "==>"
            echo "==> Service Status:"
            ego service_command status mongodb-mms
          fi

          echo "==>"
          echo "==> $DIR/logs/mms-migration.log"
          cat "$DIR/logs/mms-migration.log" 2>/dev/null || echo "No logs found."

          echo "==>"
          echo "==> $DIR/logs/daemon.log"
          cat "$DIR/logs/daemon.log" 2>/dev/null || echo "No logs found."

          echo "==>"
          echo "==> $DIR/logs/daemon-startup.log"
          cat "$DIR/logs/daemon-startup.log" 2>/dev/null || echo "No logs found."

          echo "==>"
          echo "==> $DIR/logs/mms0-startup.log"
          cat "$DIR/logs/mms0-startup.log" 2>/dev/null || echo "No logs found."

          echo "==>"
          echo "==> $DIR/logs/mms0.log"
          cat "$DIR/logs/mms0.log" 2>/dev/null || echo "No logs found."

  "clean":
    - command: shell.exec
      params:
        type: system
        shell: bash
        script: |
          echo "==>"
          echo "==> Cleaning any pre-installed Ops Manager / MongoDB artifacts"
          ego ops_manager_clean

# Ensure the Evergreen host is clean
pre:
  - func: "fetch source"
  - func: "merge in base branch"
  - func: "ego install"
  - func: "clean"

# Print logs and leave nothing behind
post:
  - func: "get logs"
  - func: "clean"

tasks:
- name: INSTALL_OPS_MANAGER_4.0
  tags:
    - install
  commands:
    - func: "install ops manager"
      vars:
        mongodb_version: 4.0.13
        version: 4.0.16
    - func: "uninstall ops manager"

- name: INSTALL_OPS_MANAGER_4.2
  tags:
    - install
  commands:
    - func: "install ops manager"
      vars:
        mongodb_version: 4.2.8
        version: 4.2.3
    - func: "uninstall ops manager"

- name: INSTALL_OPS_MANAGER_4.2_PACKAGE
  tags:
    - install_package_deb
    - install_package_rpm
  commands:
    - func: "install ops manager package"
      vars:
        mongodb_version: 4.2.8
        archive: ${archive}
    - func: "uninstall ops manager"

- name: INSTALL_OPS_MANAGER_4.3_TGZ
  tags:
    - install
  commands:
    - func: "install ops manager tgz"
      vars:
        mongodb_version: 4.2.8
        version: 4.3.9
    - func: "uninstall ops manager"

- name: INSTALL_OPS_MANAGER_4.3
  tags:
    - install
  commands:
    - func: "install ops manager"
      vars:
        mongodb_version: 4.2.8
        version: 4.3.9
    - func: "uninstall ops manager"

- name: INSTALL_4.0-UPGRADE_4.2-UPGRADE_4.3
  tags:
    - upgrade
  commands:
    - func: "install ops manager"
      vars:
        mongodb_version: 4.0.13
        version: 4.0.16
    - func: "install ops manager"
      vars:
        version: 4.2.15
    - func: "install ops manager"
      vars:
        version: 4.3.9
    - func: "uninstall ops manager"

buildvariants:
- name: ubuntu-18.04
  display_name: Ubuntu 18.04
  run_on: ubuntu1804-build
  expansions:
    *package_deb
  tasks:
  - name: .install
  - name: .install_package_deb
  - name: .upgrade

- name: rhel-7.6
  display_name: RHEL 7.6
  run_on: rhel76-build
  expansions:
    *package_rpm
  tasks:
  - name: .install
  - name: .install_package_rpm
  - name: .upgrade
